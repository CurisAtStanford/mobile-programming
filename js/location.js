// Generated by CoffeeScript 1.9.3
$(function() {

  /*
  	Must divide logic among blocks
  	Divide so I can get location with anything
  
  	Notes: my location will always go first, no matter what
   */

  /*
  	triggers is a JS object broken up like the following:
  	first: the first condition given
  	operator: the type of operator
  	second: second condition given
  
  	actions is an array of the action indicators
   */
  var BUZZ, IS_IN, IS_NOT_IN, MAP, MY_AREA, MY_LOCATION, SIREN, WEATHER, audio, blockIDs, check_if_contains, cloudy_codes, count, doIFTTT, get_rectangle_coords, load_weather, make_audio_sound, map, myLat, myLng, myLocation, polygonArea, rain_codes, sunny_codes;
  IS_IN = 6;
  IS_NOT_IN = 7;
  MY_AREA = 0;
  MY_LOCATION = 1;
  WEATHER = 2;

  /*
  	operators: and operator ID
  	is in: 
  	is not in:
   */
  polygonArea = null;
  myLat = null;
  myLng = null;

  /*
  	weatherInfo = 
  		"0": "tornado"
  		"1": "tropical storm"
  		"2": "hurricane"
  		"3": "severe thunderstorms"
  		"4": "thunderstorms"
  		"5": mixed rain and snow
  		6: mixed rain and sleet
  		7: mixed snow and sleet
  		8: freezing drizzle
  		9: drizzle
  		10: freezing rain
  		11: showers
  		12: showers
  		13: snow flurries
  		14: light snow showers
  		15: blowing snow
  		16: snow
  		17: hail
  		18: sleet
  		19: dust
  		20: foggy
  		21: haze
  		22: smoky
  		23: blustery
  		24: windy
  		25: cold
  		26: cloudy
  		27: mostly cloudy (night)
  		28: mostly cloudy (day)
  		29: partly cloudy (night)
  		30: partly cloudy (day)
  		31: clear (night)
  		32: sunny
  		33: fair (night)
  		34: fair (day)
  		35: mixed rain and hail
  		36: hot
  		37: isolated thunderstorms
  		38: scattered thunderstorms
  		39: scattered thunderstorms
  		40: scattered showers
  		41: heavy snow
  		42: scattered snow showers
  		43: heavy snow
  		44: partly cloudy
  		45: thundershowers
  		46: snow showers
  		47: isolated thundershowers
  		3200: "not available"
   */
  doIFTTT = function(triggers, actions) {
    var action, bounds, firstBlock, interval, operator, promise, rectangle, secondBlock;
    firstBlock = triggers.firstBlock;
    operator = triggers.operator;
    secondBlock = triggers.secondBlock;
    action = actions;
    if ((firstBlock === MY_LOCATION && secondBlock === MY_AREA) || (firstBlock === MY_AREA && secondBlock === MY_LOCATION)) {
      console.log("GOT HERE SO IT SHOULD WORK");
      bounds = map.getBounds();
      rectangle = get_rectangle_coords(bounds);
      polygonArea = new google.maps.Polygon({
        paths: rectangle,
        strokeColor: '#FF0000',
        strokeOpacity: 0.8,
        strokeWeight: 3,
        fillColor: '#FF0000',
        fillOpacity: 0.35
      });
      polygonArea.setMap(map);
      check_if_contains(action);
      return interval = setInterval(function() {
        return check_if_contains(action);
      }, 7000);
    } else if (firstBlock === secondBlock) {
      return action();
    } else if ((firstBlock === MY_LOCATION && secondBlock === WEATHER) || (firstBlock === WEATHER && secondBlock === MY_LOCATION)) {
      promise = myLocation();
      return promise.done(function() {
        return load_weather(myLat + "," + myLng, action);
      });
    } else {
      return console.log("An error ocurred unfortunately");
    }
  };
  myLocation = function() {
    var defObject;
    defObject = $.Deferred();
    navigator.geolocation.getCurrentPosition(function(position) {
      myLat = position.coords.latitude;
      myLng = position.coords.longitude;
      console.log("Latitude: " + position.coords.latitude);
      console.log("Longitude: " + position.coords.longitude);
      defObject.resolve();
    });
    return defObject.promise();
  };
  get_rectangle_coords = function(bounds) {
    var northEast, northEastLat, northEastLng, northWestLat, northWestLng, southEastLat, southEastLng, southWest, southWestLat, southWestLng;
    northEast = bounds.getNorthEast();
    southWest = bounds.getSouthWest();
    southWestLat = southWest.lat();
    southWestLng = southWest.lng();
    northEastLat = northEast.lat();
    northEastLng = northEast.lng();
    southEastLat = northEast.lat();
    southEastLng = southWest.lng();
    northWestLng = northEast.lng();
    northWestLat = southWest.lat();
    return [new google.maps.LatLng(southWestLat, southWestLng), new google.maps.LatLng(northWestLat, northWestLng), new google.maps.LatLng(northEastLat, northEastLng), new google.maps.LatLng(southEastLat, southEastLng)];
  };
  audio = null;
  map = null;
  google.maps.event.addDomListener(window, 'load', function() {
    var promise;
    promise = myLocation();
    return promise.done(function() {
      var mapProp;
      mapProp = {
        center: new google.maps.LatLng(myLat, myLng),
        zoom: 17,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
        minZoom: 17,
        maxZoom: 17
      };
      return map = new google.maps.Map(document.getElementById("google_map"), mapProp);

      /*
      			google.maps.event.addListener map,'click',(event)->
      				obj = 
      					position: event.latLng
      					map: map
      				marker = new google.maps.Marker obj
      				console.log map.getBounds().getSouthWest().lat()
      				console.log event.latLng.lat()
      				bounds = map.getBounds()
      				rectangle = get_rectangle_coords bounds
      				polygonArea = new google.maps.Polygon
      					paths: rectangle
      					strokeColor: '#FF0000'
      					strokeOpacity: 0.8
      					strokeWeight: 3
      					fillColor: '#FF0000'
      					fillOpacity: 0.35
      				polygonArea.setMap map
       */
    });
  });
  count = 0;
  check_if_contains = function(callback) {
    var myLoc;
    console.log(callback);
    count++;
    myLoc = myLocation();
    return myLoc.done(function() {
      var myLatLng;
      myLatLng = new google.maps.LatLng(myLat, myLng);
      if (google.maps.geometry.poly.containsLocation(myLatLng, polygonArea)) {
        $("#message").text("You re in " + count + "!");
        callback();
        return true;
      } else {
        $("#message").text("You are not in " + count);
        return false;
      }
    });
  };
  rain_codes = [3, 4, 5, 6, 8, 9, 10, 11, 12, 35, 37, 38, 39, 40, 45, 47];
  cloudy_codes = [26, 27, 28, 29, 30, 44];
  sunny_codes = [32, 36];
  load_weather = function(location, callback) {
    var curClass;
    curClass = ($(".wi").attr("class").toString().split(' '))[1];
    return $.simpleWeather({
      location: location,
      unit: 'f',
      success: function(weather) {
        var code;
        code = parseInt(weather.todayCode);
        console.log(code);
        if (curClass === "wi-umbrella") {
          console.log("Got in umbrella");
          if ($.inArray(code, rain_codes) !== -1) {
            callback();
          }
        } else if (curClass === "wi-cloudy") {
          if ($.inArray(code, cloudy_codes) !== -1) {
            callback();
          }
        } else if (curClass === "wi-day-sunny") {
          if ($.inArray(code, sunny_codes) !== -1) {
            callback();
          }
        } else {
          console.log("DIDN'T MATCH");
        }
      },
      error: function(error) {
        $("#message").text("Error");
        console.log("ERROR on WEATHER");
      }
    });
  };
  make_audio_sound = function() {
    return audio.play();
  };
  MAP = 3;
  BUZZ = 4;
  SIREN = 10;
  blockIDs = {
    drag1: MY_LOCATION,
    drag2: WEATHER,
    drag3: IS_IN,
    drag4: BUZZ,
    drag5: MY_AREA,
    drag6: SIREN
  };
  return $("#doIFTTT").click(function() {
    var actions, curID, element, elementsInEnvironment, firstBlockAccountedFor, i, len, result, triggers;
    triggers = {};
    actions = null;
    elementsInEnvironment = document.getElementsByClassName("drop_over");
    console.log(elementsInEnvironment.length);
    firstBlockAccountedFor = false;
    for (i = 0, len = elementsInEnvironment.length; i < len; i++) {
      element = elementsInEnvironment[i];
      curID = element.id;
      console.log(curID);
      if (curID === "drag3") {
        triggers.operator = blockIDs[curID];
        console.log(triggers.operator);
      } else if (curID === "drag4") {
        actions = make_audio_sound;
        audio = new Audio("sound/Ding.mp3");
        audio.play();
        audio.pause();
      } else if (curID === "drag6") {
        actions = make_audio_sound;
        audio = new Audio("sound/Siren.mp3");
        audio.play();
        audio.pause();
      } else {
        if (firstBlockAccountedFor === !true) {
          firstBlockAccountedFor = true;
          triggers.firstBlock = blockIDs[curID];
        } else {
          triggers.secondBlock = blockIDs[curID];
        }
      }
    }
    return result = doIFTTT(triggers, actions);
  });
});
