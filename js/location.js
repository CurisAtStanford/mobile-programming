// Generated by CoffeeScript 1.9.3
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$(function() {

  /*
  	Must divide logic among blocks
  	Divide so I can get location with anything
  
  	Notes: my location will always go first, no matter what
   */

  /*
  	triggers is a JS object broken up like the following:
  	first: the first condition given
  	operator: the type of operator
  	second: second condition given
  
  	actions is an array of the action indicators
   */
  var BUZZ, CLOCK, IS_IN, IS_NOT_IN, MAP, MY_AREA, MY_IMAGE, MY_LOCATION, MY_TEXT, MY_TIME, NMAX_TAGS, SIREN, WEATHER, YOUTUBE, audio, blockIDs, checkIfEqual, checkMatchingTime, check_if_contains, cloudy_codes, count, get_rectangle_coords, get_tags, height, image_url, load_weather, make_audio_sound, map, matched, myLat, myLng, myLocation, play_youtube, polygonArea, rain_codes, run, startup, streaming, sunny_codes, take_picture, timeMatches, top_tags, width;
  IS_IN = 6;
  IS_NOT_IN = 7;
  MY_AREA = 0;
  MY_LOCATION = 1;
  WEATHER = 2;

  /*
  	operators: and operator ID
  	is in: 
  	is not in:
   */
  polygonArea = null;
  myLat = null;
  myLng = null;

  /*
  	weatherInfo = 
  		"0": "tornado"
  		"1": "tropical storm"
  		"2": "hurricane"
  		"3": "severe thunderstorms"
  		"4": "thunderstorms"
  		"5": mixed rain and snow
  		6: mixed rain and sleet
  		7: mixed snow and sleet
  		8: freezing drizzle
  		9: drizzle
  		10: freezing rain
  		11: showers
  		12: showers
  		13: snow flurries
  		14: light snow showers
  		15: blowing snow
  		16: snow
  		17: hail
  		18: sleet
  		19: dust
  		20: foggy
  		21: haze
  		22: smoky
  		23: blustery
  		24: windy
  		25: cold
  		26: cloudy
  		27: mostly cloudy (night)
  		28: mostly cloudy (day)
  		29: partly cloudy (night)
  		30: partly cloudy (day)
  		31: clear (night)
  		32: sunny
  		33: fair (night)
  		34: fair (day)
  		35: mixed rain and hail
  		36: hot
  		37: isolated thunderstorms
  		38: scattered thunderstorms
  		39: scattered thunderstorms
  		40: scattered showers
  		41: heavy snow
  		42: scattered snow showers
  		43: heavy snow
  		44: partly cloudy
  		45: thundershowers
  		46: snow showers
  		47: isolated thundershowers
  		3200: "not available"
   */
  run = function(triggers, actions) {
    var action, bounds, firstBlock, interval, operator, promise, rectangle, secondBlock;
    console.log(triggers);
    firstBlock = triggers.firstBlock;
    operator = triggers.operator;
    secondBlock = triggers.secondBlock;
    action = actions;
    if ((firstBlock === MY_LOCATION && secondBlock === MY_AREA) || (firstBlock === MY_AREA && secondBlock === MY_LOCATION)) {
      bounds = map.getBounds();
      rectangle = get_rectangle_coords(bounds);
      polygonArea = new google.maps.Polygon({
        paths: rectangle,
        strokeColor: '#FF0000',
        strokeOpacity: 0.8,
        strokeWeight: 3,
        fillColor: '#FF0000',
        fillOpacity: 0.35
      });
      polygonArea.setMap(map);
      check_if_contains(action);
      return interval = setInterval(function() {
        return check_if_contains(action);
      }, 7000);
    } else if (firstBlock === secondBlock) {
      return action();
    } else if ((firstBlock === MY_LOCATION && secondBlock === WEATHER) || (firstBlock === WEATHER && secondBlock === MY_LOCATION)) {
      promise = myLocation();
      return promise.done(function() {
        return load_weather(myLat + "," + myLng, action);
      });
    } else if ((firstBlock === MY_TIME && secondBlock === CLOCK) || (firstBlock === CLOCK && secondBlock === MY_TIME)) {
      if (checkMatchingTime()) {
        action();
        return;
      }
      return interval = setInterval(function() {
        if (checkMatchingTime()) {
          action();
          return clearInterval(interval);
        }
      }, 7000);
    } else if ((firstBlock === MY_IMAGE && secondBlock === MY_TEXT) || (firstBlock === MY_TEXT && secondBlock === MY_IMAGE)) {
      return get_tags(image_url, checkIfEqual, action);
    } else {
      return console.log("An error ocurred unfortunately");
    }
  };
  image_url = null;
  top_tags = [];
  matched = false;
  NMAX_TAGS = 5;
  get_tags = (function(_this) {
    return function(img_url, callback, action) {
      console.log("got here hehe");
      return $.ajax({
        url: "https://api.clarifai.com/v1/tag/?url=" + encodeURI(img_url),
        headers: {
          Authorization: "Bearer 1uFnHTSieI3VcXsQR23Vtkivo8vYEq"
        },
        error: function(x, textStatus, z) {
          return alert("error");
        },
        success: function(json, textStatus, z) {
          var top_probs;
          top_tags = json.results[0].result.tag.classes.slice(0, NMAX_TAGS);
          top_probs = json.results[0].result.tag.probs.slice(0, NMAX_TAGS);
          return callback(action);
        }
      });
    };
  })(this);
  $("#image_input")[0].oninput = (function(_this) {
    return function() {
      image_url = $("#image_input").val();
      $("#drag10").css({
        backgroundImage: "url(" + image_url + ")",
        backgroundSize: 'cover'
      });
      $("#image_input").remove();
      return $("#image_pic").remove();
    };
  })(this);
  checkIfEqual = function(action) {
    var text;
    text = $("#text_input").val();
    console.log(text);
    if (indexOf.call(top_tags, text) >= 0) {
      return action();
    }
  };
  checkMatchingTime = function() {
    var currentTime;
    currentTime = new Date();
    return timeMatches(currentTime.getHours(), currentTime.getMinutes());
  };
  timeMatches = function(hours, minutes) {
    var clock_hour, clock_minutes, clock_time, hours_match, minutes_match;
    console.log("GOT IN HERE!!!!!!!!!");
    clock_hour = $("#hours").text();
    clock_minutes = $("#minutes").text();
    clock_time = $("#time").text();
    console.log(clock_hour);
    if (clock_time === "PM") {
      clock_hour = parseInt(clock_hour) + 12;
    }
    console.log(clock_hour);
    console.log(typeof parseInt(clock_minutes));
    hours_match = parseInt(hours) === parseInt(clock_hour);
    minutes_match = parseInt(minutes) === parseInt(clock_minutes);
    console.log(hours_match);
    console.log(minutes_match);
    return hours_match && minutes_match;
  };
  myLocation = function() {
    var defObject;
    defObject = $.Deferred();
    navigator.geolocation.getCurrentPosition(function(position) {
      myLat = position.coords.latitude;
      myLng = position.coords.longitude;
      defObject.resolve();
    });
    return defObject.promise();
  };
  get_rectangle_coords = function(bounds) {
    var northEast, northEastLat, northEastLng, northWestLat, northWestLng, southEastLat, southEastLng, southWest, southWestLat, southWestLng;
    northEast = bounds.getNorthEast();
    southWest = bounds.getSouthWest();
    southWestLat = southWest.lat();
    southWestLng = southWest.lng();
    northEastLat = northEast.lat();
    northEastLng = northEast.lng();
    southEastLat = northEast.lat();
    southEastLng = southWest.lng();
    northWestLng = northEast.lng();
    northWestLat = southWest.lat();
    return [new google.maps.LatLng(southWestLat, southWestLng), new google.maps.LatLng(northWestLat, northWestLng), new google.maps.LatLng(northEastLat, northEastLng), new google.maps.LatLng(southEastLat, southEastLng)];
  };
  audio = null;
  map = null;
  google.maps.event.addDomListener(window, 'load', function() {
    var promise;
    promise = myLocation();
    return promise.done(function() {
      var mapProp;
      mapProp = {
        center: new google.maps.LatLng(myLat, myLng),
        zoom: 17,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
        minZoom: 17,
        maxZoom: 17
      };
      return map = new google.maps.Map(document.getElementById("google_map"), mapProp);

      /*
      			google.maps.event.addListener map,'click',(event)->
      				obj = 
      					position: event.latLng
      					map: map
      				marker = new google.maps.Marker obj
      				 * map.getBounds().getSouthWest().lat()
      				 * event.latLng.lat()
      				bounds = map.getBounds()
      				rectangle = get_rectangle_coords bounds
      				polygonArea = new google.maps.Polygon
      					paths: rectangle
      					strokeColor: '#FF0000'
      					strokeOpacity: 0.8
      					strokeWeight: 3
      					fillColor: '#FF0000'
      					fillOpacity: 0.35
      				polygonArea.setMap map
       */
    });
  });
  count = 0;
  check_if_contains = function(callback) {
    var myLoc;
    count++;
    myLoc = myLocation();
    return myLoc.done(function() {
      var myLatLng;
      myLatLng = new google.maps.LatLng(myLat, myLng);
      if (google.maps.geometry.poly.containsLocation(myLatLng, polygonArea)) {
        $("#message").text("You re in " + count + "!");
        callback();
        return true;
      } else {
        $("#message").text("You are not in " + count);
        return false;
      }
    });
  };
  rain_codes = [3, 4, 5, 6, 8, 9, 10, 11, 12, 35, 37, 38, 39, 40, 45, 47];
  cloudy_codes = [26, 27, 28, 29, 30, 44];
  sunny_codes = [32, 34, 36];
  load_weather = function(location, callback) {
    var $active_weather;
    $active_weather = $(".real-active-slide");
    return $.simpleWeather({
      location: location,
      unit: 'f',
      success: function(weather) {
        var code;
        code = parseInt(weather.todayCode);
        console.log("WEATHER CODE");
        console.log(code);
        if ($active_weather.hasClass("rainy-icon")) {
          if ($.inArray(code, rain_codes) !== -1) {
            return callback();
          }
        } else if ($active_weather.hasClass("cloudy-icon")) {
          if ($.inArray(code, cloudy_codes) !== -1) {
            return callback();
          }
        } else if ($active_weather.hasClass("sunny-icon")) {
          if ($.inArray(code, sunny_codes) !== -1) {
            return callback();
          }
        } else {

        }
      },
      error: function(error) {
        $("#message").text("Error");
      }
    });
  };
  make_audio_sound = function() {
    return audio.play();
  };
  play_youtube = function() {
    var video_name;
    video_name = $("#youtube_input").val().slice(32);
    return $("#drag9").html("<iframe id='youtube_video' width='100%' height='100%' src='https://www.youtube.com/embed/" + video_name + "?modestbranding=1&showinfo=0&iv_load_policy=3&controls=0&autoplay=0" + " frameborder='0' allowfullscreen=1></iframe>");
  };
  MAP = 3;
  BUZZ = 4;
  SIREN = 10;
  CLOCK = 8;
  MY_TIME = 9;
  MY_IMAGE = 100;
  MY_TEXT = 150;
  YOUTUBE = 120;
  blockIDs = {
    drag1: MY_LOCATION,
    drag2: WEATHER,
    drag3: IS_IN,
    drag4: BUZZ,
    drag5: MY_AREA,
    drag6: SIREN,
    drag7: CLOCK,
    drag8: MY_TIME,
    drag9: YOUTUBE,
    drag10: MY_IMAGE,
    drag11: MY_TEXT
  };
  $("#reset").click(function() {
    return location.reload();
  });
  $("#run").click(function() {
    var actions, curID, element, elementsInEnvironment, firstBlockAccountedFor, i, len, result, triggers;
    triggers = {};
    actions = null;
    elementsInEnvironment = document.querySelectorAll(".drop_over.draggable");
    firstBlockAccountedFor = false;
    for (i = 0, len = elementsInEnvironment.length; i < len; i++) {
      element = elementsInEnvironment[i];
      console.log(element);
      curID = element.id;
      if (curID === "drag3") {
        triggers.operator = blockIDs[curID];
      } else if (curID === "drag4") {
        actions = make_audio_sound;
        audio = new Audio("sound/Ding.mp3");
        audio.play();
        audio.pause();
      } else if (curID === "drag6") {
        actions = make_audio_sound;
        audio = new Audio("sound/Siren.mp3");
        audio.play();
        audio.pause();
      } else if (curID === "drag12") {
        actions = take_picture;
      } else if (curID = "drag9") {
        actions = play_youtube;
      } else {
        if (firstBlockAccountedFor === !true) {
          firstBlockAccountedFor = true;
          triggers.firstBlock = blockIDs[curID];
        } else {
          triggers.secondBlock = blockIDs[curID];
        }
      }
    }
    return result = run(triggers, actions);
  });
  width = 290;
  height = 0;
  streaming = false;
  startup = function() {
    var canvas, photo, video;
    video = document.getElementById('video');
    canvas = document.getElementById('canvas');
    photo = document.getElementById('photo');
    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
    navigator.getMedia({
      video: true,
      audio: false
    }, (function(stream) {
      video = document.querySelector('video');
      video.src = window.URL.createObjectURL(stream);
      video.onloadedmetadata = function(e) {
        video.play();
      };
    }), function(error) {
      console.log('Camera blocked - the following error occurred: ' + error);
    });
    return video.addEventListener('canplay', (function(event) {
      if (!streaming) {
        height = video.videoHeight / (video.videoWidth / width);
        video.setAttribute('width', width);
        video.setAttribute('height', height);
        canvas.setAttribute('width', width);
        canvas.setAttribute('height', height);
        streaming = true;
      }
    }), false);
  };
  take_picture = function() {
    var context, data;
    context = canvas.getContext('2d');
    if (width && height) {
      canvas.width = width;
      canvas.height = height;
      context.drawImage(video, 0, 0, width, height);
      data = canvas.toDataURL('image/png');
      photo.setAttribute('src', data);
    }
  };
  return window.addEventListener('load', startup, false);
});
