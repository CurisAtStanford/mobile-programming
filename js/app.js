// Generated by CoffeeScript 1.9.3
$(function() {
  var $hours, $minutes, $time, areaBlockInfo, areasFilled, check_zone, check_zones_filled, drag_move, dropzone, hours_counter, i, len, minutes_counter, morning, ref, setup_dropzone, snap_to, swiper_hor, swiper_reg, swiper_ver, toggle_area, transform, zones;
  swiper_reg = new Swiper('.swiper-container-reg', {
    pagination: '.swiper-pagination',
    nextButton: '.swiper-button-next',
    prevButton: '.swiper-button-prev',
    effect: 'coverflow',
    slideActiveClass: 'fake-active-slide',
    slideNextClass: 'real-active-slide',
    noSwiping: true,
    noSwipingClass: 'stop-swiping',
    slidesPerView: 3,
    spaceBetween: 30,
    speed: 800,
    loop: true,
    coverflow: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: false
    }
  });
  swiper_ver = new Swiper('.swiper-container-ver', {
    noSwiping: true,
    noSwipingClass: 'stop-swiping',
    effect: 'coverflow',
    slidesPerView: 1,
    spaceBetween: 30,
    loop: true,
    direction: 'vertical',
    speed: 800,
    coverflow: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: false
    }
  });
  swiper_hor = new Swiper('.swiper-container-hor', {
    effect: 'coverflow',
    noSwiping: true,
    noSwipingClass: 'stop-swiping',
    slidesPerView: 1,
    spaceBetween: 30,
    speed: 800,
    loop: true,
    coverflow: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: false
    }
  });
  interact(".swiper-button-next").on('tap', function() {
    swiper_reg.slideNext();
    swiper_ver.slideNext();
    swiper_hor.slideNext();
    return console.log("BOOM");
  });
  interact(".swiper-button-prev").on('tap', function() {
    swiper_reg.slidePrev();
    swiper_ver.slidePrev();
    swiper_hor.slidePrev();
    return console.log("BAM");
  });
  transform = function(element, x, y, scale_ratio) {
    return element.style.webkitTransform = element.style.transform = "translate(" + x + "px, " + y + "px) scale(" + scale_ratio + ")";
  };
  drag_move = function(event) {
    var target, x, y;
    target = event.target;
    x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
    y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;
    transform(target, x, y, 1);
    target.setAttribute('data-x', x);
    return target.setAttribute('data-y', y);
  };
  snap_to = function(drop_x, drop_y) {
    return {
      x: drop_x + 8,
      y: drop_y + 8,
      range: 400
    };
  };
  check_zone = function(block, area) {
    var areaType, blockTypes;
    areaType = area.attr("id").toString();
    blockTypes = block.attr("class").toString().split(' ');
    if (parseInt($.inArray(areaType, blockTypes)) !== -1) {
      return true;
    }
    return false;
  };
  areasFilled = [false, false, false, false];
  areaBlockInfo = {};
  check_zones_filled = function(target) {
    var targetID;
    targetID = target.attr("id");
    switch (targetID) {
      case "block1":
        return areasFilled[0];
      case "block2":
        return areasFilled[2];
      case "block3":
        return areasFilled[3];
      case "operator":
        return areasFilled[1];
      default:
        return false;
    }
  };
  toggle_area = function(target) {
    var targetID;
    targetID = target.attr("id");
    switch (targetID) {
      case "block1":
        if (areasFilled[0]) {
          return areasFilled[0] = false;
        } else {
          return areasFilled[0] = true;
        }
        break;
      case "block2":
        if (areasFilled[2]) {
          return areasFilled[2] = false;
        } else {
          return areasFilled[2] = true;
        }
        break;
      case "block3":
        if (areasFilled[3]) {
          return areasFilled[3] = false;
        } else {
          return areasFilled[3] = true;
        }
        break;
      case "operator":
        if (areasFilled[1]) {
          return areasFilled[1] = false;
        } else {
          return areasFilled[1] = true;
        }
        break;
      default:
        return console.log("error on toggle");
    }
  };
  setup_dropzone = function(el, accept) {
    return interact(el).dropzone({
      accept: accept
    }).on('dropactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_zone(related_target, target) === false) {
        return;
      }
      if (related_target.hasClass("in_zone")) {
        related_target.removeClass("in_zone");
        toggle_area(target);
      }
      target.prop('dropzoneName', target.text());
      target.text('Drop here!');
      target.addClass('drop_possible');
      return related_target.addClass('drop_possible');
    }).on('dropdeactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      target.text(target.prop('dropzoneName'));
      target.removeClass('drop_possible');
      return related_target.removeClass('drop_possible');
    }).on('dragenter', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_zone(related_target, target) === false) {
        return;
      }
      if (check_zones_filled(target)) {
        return;
      }
      return target.addClass('drop_over');
    }).on('dragleave', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_zones_filled(target)) {
        return;
      }
      target.removeClass('drop_over');
      return related_target.removeClass('drop_over');
    }).on('drop', function(event) {
      var related_target, result, target, x, y;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      result = check_zones_filled(target);
      if (check_zone(related_target, target) && (result === false)) {
        related_target.addClass('drop_over');
        related_target.addClass('in_zone');
        return toggle_area(target);
      } else {
        x = 0;
        y = 0;
        transform(related_target[0], x, y, 1);
        related_target[0].setAttribute('data-x', x);
        return related_target[0].setAttribute('data-y', y);
      }
    });
  };
  setup_dropzone('.dropzone', '.draggable');
  zones = [];
  ref = $('.dropzone');
  for (i = 0, len = ref.length; i < len; i++) {
    dropzone = ref[i];
    zones.push({
      x: dropzone.getBoundingClientRect().left,
      y: dropzone.getBoundingClientRect().top
    });
  }
  interact('.draggable').draggable({
    onmove: function(event) {
      return drag_move(event);
    },
    onstart: function(event) {
      var target;
      target = $(event.target);
      return target.css({
        zIndex: 10
      });
    },
    onend: function(event) {
      var target;
      target = $(event.target);
      return target.css({
        zIndex: 0
      });
    },
    snap: {
      targets: [snap_to(zones[0].x, zones[0].y), snap_to(zones[1].x, zones[1].y), snap_to(zones[2].x, zones[2].y), snap_to(zones[3].x, zones[3].y)],
      relativePoints: [
        {
          x: 0,
          y: 0
        }
      ],
      endOnly: true
    },
    restrict: {
      restriction: 'body',
      endOnly: true,
      elementRect: {
        top: 0,
        left: 0,
        bottom: 1,
        right: 1
      }
    },
    axis: 'xy',
    inertia: true,
    max: Infinity,
    maxPerElement: 2
  });
  $hours = $("#hours");
  $minutes = $("#minutes");
  $time = $("#time");
  hours_counter = 12;
  minutes_counter = 0;
  morning = true;
  interact('.arrowUp').on('tap', function(event) {
    var block, hours_text, minutes_text;
    block = $(event.currentTarget).parent()[0].id.toString();
    console.log(block);
    switch (block) {
      case "hoursBlock":
        hours_counter++;
        if (hours_counter > 12) {
          hours_counter = 1;
        }
        hours_text = hours_counter.toString();
        if (hours_counter <= 9) {
          hours_text = "0" + hours_counter;
        }
        return $hours.text(hours_text);
      case "minutesBlock":
        minutes_counter++;
        if (minutes_counter > 59) {
          minutes_counter = 0;
        }
        minutes_text = minutes_counter.toString();
        if (minutes_counter <= 9) {
          minutes_text = "0" + minutes_counter;
        }
        return $minutes.text(minutes_text);
      case "timeBlock":
        if (morning) {
          $time.text("PM");
          return morning = false;
        } else {
          $time.text("AM");
          return morning = true;
        }
        break;
      default:
        return console.log("BIG ERROR NOOOOOO");
    }
  });
  interact('.arrowDown').on('tap', function(event) {
    var block, hours_text, minutes_text;
    block = $(event.currentTarget).parent()[0].id.toString();
    switch (block) {
      case "hoursBlock":
        hours_counter--;
        if (hours_counter <= 0) {
          hours_counter = 12;
        }
        hours_text = hours_counter.toString();
        if (hours_counter <= 9) {
          hours_text = "0" + hours_counter;
        }
        return $hours.text(hours_text);
      case "minutesBlock":
        minutes_counter--;
        if (minutes_counter < 0) {
          minutes_counter = 59;
        }
        minutes_text = minutes_counter.toString();
        if (minutes_counter <= 9) {
          minutes_text = "0" + minutes_counter;
        }
        return $minutes.text(minutes_text);
      case "timeBlock":
        if (morning) {
          $time.text("PM");
          return morning = false;
        } else {
          $time.text("AM");
          return morning = true;
        }
        break;
      default:
        return console.log("BIG ERROR NOOOOOO");
    }
  });
  interact("#youtube_input").on('tap', function(event) {
    return $("#youtube_input").focus();
  });
  interact("#image_input").on('tap', function(event) {
    return $("#image_input").focus();
  });
  interact("#text_input").on('tap', function(event) {
    return $("#text_input").focus();
  });
  $("#google_map").bind('touchstart mousedown', function() {
    return $("#drag5").removeClass("draggable").addClass("not_draggable");
  });
  return $("body").bind('touchend mouseup', function() {
    return $("#drag5").removeClass("not_draggable").addClass("draggable");
  });
});
