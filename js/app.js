// Generated by CoffeeScript 1.9.3
$(function() {
  var checkArea, dragMove, dropzone, i, len, previousLeft, previousUp, ref, setupDropzone, weather_block_count, weather_icons, zones;
  checkArea = function(block, area) {
    var areaType, blockTypes;
    areaType = area.attr("id").toString();
    blockTypes = block.attr("class").toString().split(' ');
    console.log(areaType);
    console.log(blockTypes);
    console.log($.inArray(areaType, blockTypes));
    if (parseInt($.inArray(areaType, blockTypes)) !== -1) {
      console.log(areaType + " is in the array");
      return true;
    }
    return false;
  };
  previousLeft = 0;
  previousUp = 0;
  dragMove = function(event) {
    var target, x, y;
    target = event.target;
    x = (parseFloat(event.target.getAttribute('data-x')) || 0) + event.dx;
    y = (parseFloat(event.target.getAttribute('data-y')) || 0) + event.dy;
    target.style.webkitTransform = target.style.transform = "translate(" + x + "px, " + y + "px)";
    target.setAttribute('data-x', x);
    return target.setAttribute('data-y', y);
  };
  setupDropzone = function(el, accept) {
    return interact(el).dropzone({
      accept: accept

      /*
      			ondropactivate: (event) ->
      				$(event.relatedTarget).addClass 'drop_possible'
      
      			ondropdeactivate: (event) ->
      				$(event.relatedTarget).removeClass 'drop_possible'
       */
    }).on('dropactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (checkArea(related_target, target) === false) {
        target.addClass('rejectzone');
        interact(".rejectzone").unset();
        return;
      }
      target.prop('dropzoneName', target.text());
      target.addClass('drop_possible');
      related_target.addClass('drop_possible');
      return target.text('Drop here!');
    }).on('dropdeactivate', function(event) {
      var target;
      target = $(event.target);
      $(event.target).removeClass('drop_possible');
      $(event.relatedTarget).removeClass('drop_possible');
      return target.text(target.prop('dropzoneName'));
    }).on('dragenter', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (checkArea(related_target, target) === false) {
        return;
      }
      return target.addClass('drop_over');
    }).on('dragleave', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      target.removeClass('drop_over');
      return related_target.removeClass('drop_over');
    }).on('drop', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      console.log(target[0]);
      console.log(related_target[0]);
      target.removeClass('drop_over');
      if (checkArea(related_target, target)) {
        console.log("CORRECT!");
        return related_target.addClass('drop_over');
      } else {
        return console.log("WRONG");
      }
    });
  };
  setupDropzone('.dropzone', '.draggable');
  zones = [];
  ref = $('.dropzone');
  for (i = 0, len = ref.length; i < len; i++) {
    dropzone = ref[i];
    zones.push({
      x: dropzone.getBoundingClientRect().left,
      y: dropzone.getBoundingClientRect().top
    });
  }
  interact('.draggable').draggable({
    onmove: function(event) {
      return dragMove(event);
    },
    snap: {
      targets: [
        function(x, y) {
          return {
            x: zones[0].x,
            y: zones[0].y,
            range: 400
          };
        }, function(x, y) {
          return {
            x: zones[1].x,
            y: zones[1].y,
            range: 400
          };
        }, function(x, y) {
          return {
            x: zones[2].x,
            y: zones[2].y,
            range: 400
          };
        }, function(x, y) {
          return {
            x: zones[3].x,
            y: zones[3].y,
            range: 400
          };
        }
      ],
      relativePoints: [
        {
          x: 0,
          y: 0
        }
      ],
      endOnly: true
    },
    restrict: {
      restriction: 'body',
      endOnly: true,
      elementRect: {
        top: 0,
        left: 0,
        bottom: 1,
        right: 1
      }
    },
    axis: 'xy',
    inertia: true,
    max: Infinity,
    maxPerElement: 2
  });
  weather_icons = ["wi wi-umbrella", "wi wi-cloudy", "wi wi-day-sunny"];
  weather_block_count = 0;
  interact('#drag2').on('tap', function(event) {
    var icon, previous_icon;
    previous_icon = weather_icons[weather_block_count];
    weather_block_count++;
    if (weather_block_count === weather_icons.length) {
      weather_block_count = 0;
    }
    icon = weather_icons[weather_block_count];
    $("#weather").removeClass(previous_icon);
    return $("#weather").addClass(icon);
  });
  $("#google_map").bind('touchstart mousedown', function() {
    return $("#drag5").removeClass("draggable").addClass("not_draggable");
  });
  return $("body").bind('touchend mouseup', function() {
    return $("#drag5").removeClass("not_draggable").addClass("draggable");
  });
});
