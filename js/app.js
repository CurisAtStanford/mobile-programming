// Generated by CoffeeScript 1.9.3
$(function() {
  var areaBlockInfo, areasFilled, checkAreasFilled, check_area, drag_move, draggable, dropzone, i, j, len, len1, previousLeft, previousUp, ref, ref1, setup_dropzone, snap_to, toggleArea, weather_block_count, weather_icons, zones;
  check_area = function(block, area) {
    var areaType, blockTypes;
    areaType = area.attr("id").toString();
    blockTypes = block.attr("class").toString().split(' ');
    if (parseInt($.inArray(areaType, blockTypes)) !== -1) {
      return true;
    }
    return false;
  };
  previousLeft = 0;
  previousUp = 0;
  drag_move = function(event) {
    var target, x, y;
    target = event.target;
    x = (parseFloat(event.target.getAttribute('data-x')) || 0) + event.dx;
    y = (parseFloat(event.target.getAttribute('data-y')) || 0) + event.dy;
    target.style.webkitTransform = target.style.transform = "translate(" + x + "px, " + y + "px)";
    target.setAttribute('data-x', x);
    return target.setAttribute('data-y', y);
  };
  snap_to = function(drop_x, drop_y) {
    return {
      x: drop_x + 10,
      y: drop_y + 10,
      range: 400
    };
  };
  areasFilled = [false, false, false, false];
  areaBlockInfo = {};
  checkAreasFilled = function(target) {
    var targetID;
    targetID = target.attr("id");
    switch (targetID) {
      case "block1":
        return areasFilled[0];
      case "block2":
        return areasFilled[2];
      case "block3":
        return areasFilled[3];
      case "operator":
        return areasFilled[1];
      default:
        return false;
    }
  };
  toggleArea = function(target) {
    var targetID;
    targetID = target.attr("id");
    switch (targetID) {
      case "block1":
        if (areasFilled[0]) {
          return areasFilled[0] = false;
        } else {
          return areasFilled[0] = true;
        }
        break;
      case "block2":
        if (areasFilled[2]) {
          return areasFilled[2] = false;
        } else {
          return areasFilled[2] = true;
        }
        break;
      case "block3":
        if (areasFilled[3]) {
          return areasFilled[3] = false;
        } else {
          return areasFilled[3] = true;
        }
        break;
      case "operator":
        if (areasFilled[1]) {
          return areasFilled[1] = false;
        } else {
          return areasFilled[1] = true;
        }
        break;
      default:
        return console.log("error on toggle");
    }
  };
  setup_dropzone = function(el, accept) {
    return interact(el).dropzone({
      accept: accept

      /*
      			ondropactivate: (event) ->
      				$(event.relatedTarget).addClass 'drop_possible'
      
      			ondropdeactivate: (event) ->
      				$(event.relatedTarget).removeClass 'drop_possible'
       */
    }).on('dropactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_area(related_target, target) === false) {
        return;
      }
      if (related_target.hasClass("in_zone")) {
        related_target.removeClass("in_zone");
        toggleArea(target);
      }
      target.prop('dropzoneName', target.text());
      target.addClass('drop_possible');
      related_target.addClass('drop_possible');
      return target.text('Drop here!');
    }).on('dropdeactivate', function(event) {
      var target;
      target = $(event.target);
      $(event.target).removeClass('drop_possible');
      $(event.relatedTarget).removeClass('drop_possible');
      return target.text(target.prop('dropzoneName'));
    }).on('dragenter', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_area(related_target, target) === false) {
        return;
      }
      if (checkAreasFilled(target)) {
        return;
      }
      return target.addClass('drop_over');
    }).on('dragleave', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (checkAreasFilled(target)) {
        return;
      }
      target.removeClass('drop_over');
      return related_target.removeClass('drop_over');
    }).on('drop', function(event) {
      var related_target, result, target, x, y;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      related_target.removeClass('drop_over');
      result = checkAreasFilled(target);
      if (check_area(related_target, target) && (result === false)) {
        related_target.addClass('drop_over');
        related_target.addClass('in_zone');
        return toggleArea(target);
      } else {
        x = 0;
        y = 0;
        related_target[0].style.webkitTransform = related_target[0].style.transform = "translate(" + x + "px, " + y + "px)";
        related_target[0].setAttribute('data-x', x);
        return related_target[0].setAttribute('data-y', y);
      }
    });
  };
  setup_dropzone('.dropzone', '.draggable');
  zones = [];
  ref = $('.dropzone');
  for (i = 0, len = ref.length; i < len; i++) {
    dropzone = ref[i];
    zones.push({
      x: dropzone.getBoundingClientRect().left,
      y: dropzone.getBoundingClientRect().top
    });
  }
  ref1 = $('.draggable');
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    draggable = ref1[j];
    $(draggable).css({
      zIndex: 0
    });
  }
  interact('.draggable').draggable({
    onmove: function(event) {
      return drag_move(event);
    },
    onstart: function(event) {
      var target;
      target = $(event.target);
      return target.css({
        zIndex: 10,
        webkitTransform: "translate3d(0px, 0px, 0px)"
      });
    },
    onend: function(event) {
      var target;
      target = $(event.target);
      return target.css({
        zIndex: 0,
        webkitTransform: "translate3d(0px, 0px, 0px)"
      });
    },
    snap: {
      targets: [snap_to(zones[0].x, zones[0].y), snap_to(zones[1].x, zones[1].y), snap_to(zones[2].x, zones[2].y), snap_to(zones[3].x, zones[3].y)],
      relativePoints: [
        {
          x: 0,
          y: 0
        }
      ],
      endOnly: true
    },
    restrict: {
      restriction: 'body',
      endOnly: true,
      elementRect: {
        top: 0,
        left: 0,
        bottom: 1,
        right: 1
      }
    },
    axis: 'xy',
    inertia: true,
    max: Infinity,
    maxPerElement: 2
  });
  weather_icons = ["wi wi-umbrella", "wi wi-cloudy", "wi wi-day-sunny"];
  weather_block_count = 0;
  interact('#drag2').on('tap', function(event) {
    var icon, previous_icon;
    previous_icon = weather_icons[weather_block_count];
    weather_block_count++;
    if (weather_block_count === weather_icons.length) {
      weather_block_count = 0;
    }
    icon = weather_icons[weather_block_count];
    $("#weather").removeClass(previous_icon);
    return $("#weather").addClass(icon);
  });
  $("#google_map").bind('touchstart mousedown', function() {
    return $("#drag5").removeClass("draggable").addClass("not_draggable");
  });
  return $("body").bind('touchend mouseup', function() {
    return $("#drag5").removeClass("not_draggable").addClass("draggable");
  });
});
