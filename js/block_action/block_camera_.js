// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.block_camera_ = (function() {
  function block_camera_() {
    this.run = bind(this.run, this);
    var css;
    css = "#camera_video {\n	position: relative;\n	left: -15px;\n	transform: scaleX(-1);\n	height: 100%;\n}\n\n#camera_photo {\n	position: relative;\n	left: -15px;\n	transform: scaleX(-1);\n	height: 100%;\n	position: absolute;\n	top: 0px;\n}";
    $('<style type="text/css"></style>').html(css).appendTo("head");
    $("<div class=\"drag-wrap draggable\" name=\"camera\">\n	<video id='camera_video' autoplay>Video stream not available.</video>\n	<canvas id='camera_canvas'></canvas>\n	<img id='camera_photo'>\n</div>").appendTo(".drag-zone");
    this.video = $("#camera_video")[0];
    this.photo = $('#camera_photo')[0];
    this.canvas = $("#camera_canvas")[0];
    this.canvas.width = 640;
    this.canvas.height = 480;
    this.context = this.canvas.getContext('2d');
    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
    navigator.getMedia({
      video: true,
      audio: false
    }, (function(_this) {
      return function(stream) {
        return _this.video.src = window.URL.createObjectURL(stream);
      };
    })(this), function(error) {
      console.log('Camera blocked - the following error occurred: ' + error);
    });
  }

  block_camera_.prototype.run = function(cb) {
    var data;
    this.context.drawImage(this.video, 0, 0, 640, 480);
    data = this.canvas.toDataURL('image/png');
    this.photo.setAttribute('src', data);
    return cb();
  };

  return block_camera_;

})();
