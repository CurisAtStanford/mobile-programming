// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.control_for_loop_ = (function() {
  function control_for_loop_() {
    this.run = __bind(this.run, this);
    var css,
      _this = this;

    css = "";
    $("<style type='text/css'></style>").html(css).appendTo("head");
    $("<div class='text'>FOR EACH</div>\n<div class='droppable steps' role='array'>LIST</div>\n<div class='text'>DO</div>\n<div class='droppable steps' role='action'>THIS</div>").appendTo(".drop-zone");
    interact('.droppable').dropzone({
      accept: '.draggable',
      overlap: .1,
      ondropactivate: function(event) {
        var $target;

        $target = $(event.target);
        return $target.addClass('can--drop');
      },
      ondragenter: function(event) {
        var $draggableElement, dropCenter, dropRect, dropzoneElement;

        $draggableElement = $(event.relatedTarget);
        dropzoneElement = event.target;
        dropRect = interact.getElementRect(dropzoneElement);
        dropCenter = {
          x: dropRect.left + dropRect.width / 2,
          y: dropRect.top + dropRect.height / 2
        };
        event.draggable.draggable({
          snap: {
            targets: [dropCenter]
          }
        });
        dropzoneElement.classList.add('can--catch');
        return $draggableElement.addClass('drop--me');
      },
      ondragleave: function(event) {
        var $relatedTarget, $target;

        $target = $(event.target);
        $relatedTarget = $(event.relatedTarget);
        $target.removeClass('can--catch');
        $relatedTarget.removeClass('caught--it');
        return $relatedTarget.removeClass('drop--me');
      },
      ondrop: function(event) {
        var $related_target, $target, block_name;

        $target = $(event.target);
        $related_target = $(event.relatedTarget);
        block_name = _.trim($related_target.text().toLowerCase());
        if ($target.attr('role') === 'array') {
          block_name = $related_target.attr("name");
          _this.array = window["block_" + block_name];
        }
        if ($target.attr('role') === 'action') {
          block_name = $related_target.attr("name");
          _this.action = window["block_" + block_name];
        }
        return $target.addClass('caught--it');
      },
      ondropdeactivate: function(event) {
        var $target;

        $target = $(event.target);
        return $target.removeClass('can--drop', 'can--catch');
      }
    });
  }

  control_for_loop_.prototype.run = function() {
    var a, i, t,
      _this = this;

    a = this.array.run();
    i = 0;
    return t = doAndRepeat(3000, function() {
      _this.action.run(a[i]);
      if (i === a.length) {
        clearTimeout(t);
      }
      return i++;
    });
  };

  return control_for_loop_;

})();
