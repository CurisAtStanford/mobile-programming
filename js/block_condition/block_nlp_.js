// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.block_nlp_ = (function() {
  function block_nlp_() {
    this.run = bind(this.run, this);
    var css, swiper_hor, swiper_reg, swiper_ver;
    css = "#drag1337 {\n	position: relative;\n}\n#nlp_field{\n	position: absolute;\n	font-size: 20px;\n	top: -30px;\n	left: 25px;\n}\n\n#nlp_input {\n	position: absolute;\n	top: 30px;\n	left: 10px;\n	width: 80px;\n	font-size: 10px;\n}\n\n.swiper-slide img {\n	width: 45px;\n	height: 45px;\n}\n\n.swiper-container {\n	width: 0%;\n	height: 0%;\n	margin-left: auto;\n	margin-right: auto;\n	position: relative;\n}\n\n.swiper-container-reg {\n	position: absolute;\n	width: 325px;\n	height: 70px;\n	left: -110px;\n	top: 40px;\n}\n\n.swiper-container-reg-cpy {\n	position: absolute;\n	width: 10px;\n	height: 70px;\n	left: -110px;\n	top: 35px;\n}\n\n.swiper-slide {\n	text-align: center;\n	display: -webkit-box;\n	display: -webkit-flex;\n	display: flex;\n	-webkit-box-pack: center;\n	-webkit-justify-content: center;\n	justify-content: center;\n	-webkit-box-align: center;\n	-webkit-align-items: center;\n	align-items: center;\n}\n\n.swiper-container-ver {\n	top: 0px;\n	left: 0px;\n	position: absolute;\n}\n\n.swiper-container-hor {\n	top: 0px;\n	left: 0px;\n	position: absolute;\n}\n\n.swiper-container-par {\n	top: 0px;\n	left: 0px;\n	position: absolute;\n}\n\n#vertical-frame {\n	opacity:0.5;\n	border-style:solid;\n	width:100px;\n	height:100px;\n	border-width:1px;\n	border-radius: 10px;\n	border:1px solid rgba(0,0,0,.2);\n	background:rgba(0,0,0,.25);\n}\n\n#horizontal-frame {\n	opacity:1;\n	border-style:solid;\n	width:100px;\n	height:100px;\n	border-width:1px;\n	border-radius: 10px;\n}";
    $('<style type="text/css"></style>').html(css).appendTo("head");
    $("<div id=\"drag1337\" class=\"drag-wrap draggable\" name=\"nlp\">\n	<div id=\"nlp_field\">I FEEL</div>\n	<input id=\"nlp_input\" type=\"text\"><br>\n	<!-- this is for the vertical container, which\n	shades up and down -->\n	<div class=\"swiper-container swiper-container-ver\">\n		<div class=\"swiper-wrapper\">\n			<div class=\"swiper-slide stop-swiping\">\n				<div id=\"vertical-frame\"></div>\n			</div>\n		</div>\n	</div>\n\n	<!-- this is for the border that glides horizontally -->\n	<div class=\"swiper-container swiper-container-hor\">\n		<div class=\"swiper-wrapper\">\n			<div class=\"swiper-slide stop-swiping\">\n				<div id=\"horizontal-frame\"></div>\n			</div>\n		</div>\n	</div>\n\n	<!-- this is for the actual pictures -->\n	<div id=\"swiper-container-reg\" class=\"swiper-container swiper-container-reg\">\n		<!-- NOTE: the pictures are repeated because they perfrom better\n		like this, there used to be lag -->\n		<div class=\"swiper-wrapper\">\n			<div class=\"swiper-slide stop-swiping thumbs-up-icon\">\n				<img src=\"img/thumbs_up.png\">\n			</div>\n			<div class=\"swiper-slide stop-swiping thumbs-down-icon\">\n				<img src=\"img/thumbs_down.png\">\n			</div>\n			<div class=\"swiper-slide stop-swiping thumbs-up-icon\">\n				<img src=\"img/thumbs_up.png\">\n			</div>\n			<div class=\"swiper-slide stop-swiping thumbs-down-icon\">\n				<img src=\"img/thumbs_down.png\">\n			</div>\n		</div>\n\n		<!-- Add Arrows -->\n		<!-- the logic for this can be found in swiper.css -->\n		<div class=\"swiper-button-next\"><i class=\"fa fa-chevron-right fa-2x\"></i></div>\n		<div class=\"swiper-button-prev\"><i class=\"fa fa-chevron-left fa-2x\"></i></div>\n	</div>\n</div>").appendTo(".drag-zone");
    interact("#nlp_input").on('tap', function(event) {
      return $("#nlp_input").focus();
    });
    this.sentiment = "";
    $("#nlp_input").on('input propertychange', (function(_this) {
      return function(event) {
        var text;
        text = $("#nlp_input").val();
        return $.ajax({
          Accept: "application/json",
          url: "https://loudelement-free-natural-language-processing-service.p.mashape.com/nlp-text/?text=" + text,
          headers: {
            'X-Mashape-Key': 'KnJbxzvOw6msheLU1Lt6ol120y0Rp1rdwCwjsnKYyLhmdJERdO'
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.log(jqXHR);
            console.log(textStatus);
            console.log(errorThrown);
            return alert("error");
          },
          success: function(json, textStatus, z) {
            return _this.sentiment = json["sentiment-text"];
          }
        });
      };
    })(this));
    swiper_reg = new Swiper('.swiper-container-reg', {
      pagination: '.swiper-pagination',
      nextButton: '.swiper-button-next',
      prevButton: '.swiper-button-prev',
      effect: 'coverflow',
      slideActiveClass: 'fake-active-slide',
      slideNextClass: 'real-active-slide',
      noSwiping: true,
      noSwipingClass: 'stop-swiping',
      slidesPerView: 1,
      speed: 300,
      loop: true,
      coverflow: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        modifier: 1,
        slideShadows: false
      }
    });
    swiper_ver = new Swiper('.swiper-container-ver', {
      noSwiping: true,
      noSwipingClass: 'stop-swiping',
      effect: 'coverflow',
      slidesPerView: 1,
      loop: true,
      direction: 'vertical',
      speed: 300,
      coverflow: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        modifier: 1,
        slideShadows: false
      }
    });
    swiper_hor = new Swiper('.swiper-container-hor', {
      effect: 'coverflow',
      noSwiping: true,
      noSwipingClass: 'stop-swiping',
      slidesPerView: 1,
      speed: 300,
      loop: true,
      coverflow: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        modifier: 1,
        slideShadows: false
      }
    });
    interact(".swiper-button-next").on('tap', function() {
      swiper_reg.slideNext();
      swiper_ver.slideNext();
      return swiper_hor.slideNext();
    });
    interact(".swiper-button-prev").on('tap', function() {
      swiper_reg.slidePrev();
      swiper_ver.slidePrev();
      return swiper_hor.slidePrev();
    });
  }

  block_nlp_.prototype.run = function() {
    var $active_emotion;
    $active_emotion = $(".real-active-slide");
    if (this.sentiment === "positive" && $active_emotion.hasClass('thumbs-down-icon')) {
      return true;
    } else if (this.sentiment === "negative" && $active_emotion.hasClass('thumbs-up-icon')) {
      return true;
    }
  };

  return block_nlp_;

})();
