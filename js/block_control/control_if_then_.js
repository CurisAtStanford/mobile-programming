// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.control_if_then_ = (function() {
  function control_if_then_($target) {
    this.run = bind(this.run, this);
    var append_to_this, css, items, onScroll;
    css = "#this-drop-zone {\n	left: 25px;\n}\n#then-text {\n	left: 115px;\n}\n#that-drop-zone {\n	left: 200px;\n}";
    $("<style type='text/css'></style>").html(css).appendTo("head");
    append_to_this = null;
    if ($target != null) {
      append_to_this = $target;
    } else {
      append_to_this = '.drop-zone';
    }
    this.counter_id = window.counter;
    window.counter = this.counter_id + 1;
    $("<div id='if-text' class='text'>IF</div>\n<div id='this-drop-zone' class='droppable steps droppable-" + this.counter_id + "' role='condition'>THIS</div>\n<div id='then-text' class='text'>THEN</div>\n<div id='that-drop-zone' class='droppable steps droppable-" + this.counter_id + "' role='action'>THAT</div>").appendTo(append_to_this);
    items = document.querySelectorAll(".drag-wrap");
    onScroll = (function(_this) {
      return function() {
        var i, pos, s2;
        i = 0;
        while (i < items.length) {
          pos = items[i].getBoundingClientRect();
          s2 = (pos.left + pos.width / 2 - (window.innerWidth / 2)) / (window.innerWidth / 1.2);
          s2 = 1 - Math.abs(s2);
          $(items[i]).css({
            '-webkit-transform': "scale(" + s2 + ")"
          });
          ++i;
        }
      };
    })(this);
    this.spot_filled = [false, false];
    interact(".droppable-" + this.counter_id).dropzone({
      accept: '.draggable',
      overlap: .1,
      ondropactivate: function(event) {
        return $target = $(event.target);
      },
      ondragenter: function(event) {
        var $draggableElement, dropCenter, dropRect, dropzoneElement;
        $draggableElement = $(event.relatedTarget);
        dropzoneElement = event.target;
        dropRect = interact.getElementRect(dropzoneElement);
        dropCenter = {
          x: dropRect.left + dropRect.width / 2,
          y: dropRect.top + dropRect.height / 2
        };
        return event.draggable.draggable({
          snap: {
            targets: [dropCenter]
          }
        });
      },
      ondragleave: function(event) {
        var $relatedTarget;
        $target = $(event.target);
        $relatedTarget = $(event.relatedTarget);
        $target.removeClass('can--catch');
        $relatedTarget.removeClass('caught--it');
        return $relatedTarget.removeClass('drop--me');
      },
      ondrop: (function(_this) {
        return function(event) {
          var $clone, $related_target, block_name, x, y;
          $target = $(event.target);
          $related_target = $(event.relatedTarget);
          if ($target.attr('role') === 'condition') {
            block_name = $related_target.attr("name");
            _this.condition = window["block_" + block_name];
          }
          if ($target.attr('role') === 'action') {
            block_name = $related_target.attr("name");
            if (block_name === "ifthen") {
              _this.transform_action_area($target, $related_target, false);
            } else if (block_name === "forloop") {
              _this.transform_action_area($target, $related_target, true);
            } else {
              _this.action = window["block_" + block_name];
            }
          }
          $target.attr("filled", "true");
          $target.addClass('caught--it');
          if ($related_target.hasClass('drag-wrap')) {
            $clone = $related_target.clone();
            $clone.removeClass('drag-wrap');
            $clone.addClass('drop-wrap');
            $clone.removeClass('getting--dragged');
            $clone.appendTo('.drop-zone');
            x = $target.position().left + 5;
            y = $target.position().top;
            $clone.css({
              '-webkit-transform': "translate(" + x + "px, " + y + "px)",
              'position': 'absolute'
            });
            $clone.attr('data-x', x);
            $clone.attr('data-y', y);
            $related_target.remove();
            items = document.querySelectorAll(".drag-wrap");
            return onScroll();
          }
        };
      })(this),
      ondropdeactivate: function(event) {
        return $target = $(event.target);
      }
    });
  }

  control_if_then_.prototype.transform_action_area = function($target, $block, isLoop) {
    var control_condition;
    $block.remove();
    $target.html(" ");
    $target.removeClass();
    $target.css({
      "width": "auto",
      "height": "auto"
    });
    $target.attr({
      "role": "whatever"
    });
    control_condition = null;
    if (isLoop) {
      control_condition = new control_for_loop_($target);
      new draggable_control_for_loop_();
    } else {
      control_condition = new control_if_then_($target);
      new draggable_control_if_then_();
    }
    return this.action = control_condition;
  };

  control_if_then_.prototype.run = function(outer_cb, element) {
    return this.condition.run((function(_this) {
      return function(true_or_false) {
        if (true_or_false) {
          return _this.action.run(outer_cb, element);
        } else {
          if (outer_cb != null) {
            return outer_cb();
          }
        }
      };
    })(this));
  };

  return control_if_then_;

})();
