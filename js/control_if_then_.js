// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.control_if_then_ = (function() {
  function control_if_then_() {
    this.run = __bind(this.run, this);
    var areas_filled, check_zone, check_zones_filled, css, dropzone, toggle_area, zones, _i, _len, _ref;

    css = "";
    $("<style type='text/css'></style>").html(css).appendTo("head");
    $("<div id='if' class=\"text\" >IF</div>\n<div id='block1' class=\"dropzone\">BLOCK1</div>\n<div id='operator' class=\"dropzone\">________</div>\n<div id='block2' class='dropzone'>BLOCK2</div>\n<div id='then' class='text'>THEN</div>\n<div id='block3' class='dropzone'>DO THIS</div>").appendTo(".dropzone_wrapper");
    check_zones_filled = function(target) {
      var target_id;

      target_id = target.attr("id");
      switch (target_id) {
        case "block1":
          return areas_filled[0];
        case "block2":
          return areas_filled[2];
        case "block3":
          return areas_filled[3];
        case "operator":
          return areas_filled[1];
        default:
          return false;
      }
    };
    areas_filled = [false, false, false, false];
    toggle_area = function(target) {
      var target_id;

      target_id = target.attr("id");
      switch (target_id) {
        case "block1":
          if (areas_filled[0]) {
            return areas_filled[0] = false;
          } else {
            return areas_filled[0] = true;
          }
          break;
        case "block2":
          if (areas_filled[2]) {
            return areas_filled[2] = false;
          } else {
            return areas_filled[2] = true;
          }
          break;
        case "block3":
          if (areas_filled[3]) {
            return areas_filled[3] = false;
          } else {
            return areas_filled[3] = true;
          }
          break;
        case "operator":
          if (areas_filled[1]) {
            return areas_filled[1] = false;
          } else {
            return areas_filled[1] = true;
          }
          break;
        default:
          return console.log("error on toggle");
      }
    };
    check_zone = function(block, area) {
      var areaType, blockTypes;

      areaType = area.attr("id").toString();
      blockTypes = block.attr("class").toString().split(' ');
      if (parseInt($.inArray(areaType, blockTypes)) !== -1) {
        return true;
      }
      return false;
    };
    interact('.dropzone').dropzone({
      accept: '.draggable'
    }).on('dropactivate', function(event) {
      var related_target, target;

      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_zone(related_target, target) === false) {
        return;
      }
      if (related_target.hasClass("in_zone")) {
        related_target.removeClass("in_zone");
        toggle_area(target);
      }
      target.prop('dropzoneName', target.text());
      target.text('Drop here!');
      target.addClass('drop_possible');
      return related_target.addClass('drop_possible');
    }).on('dropdeactivate', function(event) {
      var related_target, target;

      target = $(event.target);
      related_target = $(event.relatedTarget);
      target.text(target.prop('dropzoneName'));
      target.removeClass('drop_possible');
      return related_target.removeClass('drop_possible');
    }).on('dragenter', function(event) {
      var $related_target, $target, draggableElement, dropCenter, dropRect, dropzoneElement;

      draggableElement = event.relatedTarget;
      dropzoneElement = event.target;
      dropRect = interact.getElementRect(dropzoneElement);
      dropCenter = {
        x: dropRect.left,
        y: dropRect.top,
        range: 400
      };
      event.draggable.draggable({
        snap: {
          targets: [dropCenter],
          relativePoints: [
            {
              x: 0,
              y: 0
            }
          ],
          endOnly: true
        }
      });
      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      if (check_zone($related_target, $target) === false) {
        return;
      }
      if (check_zones_filled($target)) {
        return;
      }
      return $target.addClass('drop_over');
    }).on('dragleave', function(event) {
      var $related_target, $target;

      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      if (check_zones_filled($target)) {
        return;
      }
      $target.removeClass('drop_over');
      return $related_target.removeClass('drop_over');
    }).on('drop', function(event) {
      var $related_target, $target, result, x, y;

      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      result = check_zones_filled($target);
      if (check_zone($related_target, $target) && (result === false)) {
        $related_target.addClass('drop_over');
        $related_target.addClass('in_zone');
        return toggle_area($target);
      } else {
        x = y = 0;
        $related_target.css({
          transform: "translate(" + x + "px, " + y + "px)"
        });
        $related_target.attr('data-x', x);
        return $related_target.attr('data-y', y);
      }
    });
    zones = [];
    _ref = $('.dropzone');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dropzone = _ref[_i];
      zones.push({
        x: dropzone.getBoundingClientRect().left,
        y: dropzone.getBoundingClientRect().top
      });
    }
    interact('.draggable').draggable({
      onmove: function(event) {
        var $target, x, y;

        $target = $(event.target);
        x = (parseFloat($target.attr('data-x')) || 0) + event.dx;
        y = (parseFloat($target.attr('data-y')) || 0) + event.dy;
        $target.css({
          transform: "translate(" + x + "px, " + y + "px)"
        });
        $target.attr('data-x', x);
        return $target.attr('data-y', y);
      },
      onstart: function(event) {
        var target;

        target = $(event.target);
        return target.css({
          zIndex: 10
        });
      },
      onend: function(event) {
        var target;

        target = $(event.target);
        return target.css({
          zIndex: 0
        });
      },
      restrict: {
        restriction: 'body',
        endOnly: true,
        elementRect: {
          top: 0,
          left: 0,
          bottom: 1,
          right: 1
        }
      },
      axis: 'xy',
      inertia: true,
      max: Infinity,
      maxPerElement: 2
    });
  }

  control_if_then_.prototype.run = function() {};

  return control_if_then_;

})();
