// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.control_for_loop = (function() {
  function control_for_loop() {
    this.run = bind(this.run, this);
    var areas_filled, check_zone, check_zones_filled, css, dropzone, i, len, ref, toggle_area, transform_drop_area, zones;
    css = "#for-outer{\n	width: 1000px;\n	height: 800px;\n	border: 1px solid LightYellow;\n	position: relative;\n	background-color: Salmon;\n}\n\n#for-for-each-in {\n	position: absolute;\n	top: 150px;\n	left: 20px;\n}\n\n#for-do {\n	position: absolute;\n	top:300px;\n	left: 20px;\n}\n\n#for-inner {\n	position: absolute;\n	top: 370px;\n	left: 10px;\n	/*border: 1px solid black;*/\n	width: 984px;\n	height: 400px;\n	background-color: white;\n}\n\n.block4-position {\n	position: absolute;\n	top: 0px;\n	left: 420px;\n\n}\n\n.block5-position {\n	position: absolute;\n	left: 140px;\n	top: 20px;\n}\n";
    $("<style type='text/css'></style>").html(css).appendTo("head");
    $("<div id='for-outer'></div>\n	<div id='for-for-each-in' class='text'>FOR EACH IN</div>\n	<div id='block4' class=\"dropzone block4-position\">LIST</div>\n	<div id='for-do' class='text'>DO</div>\n	<div id='for-inner'>\n		<div id='block5' class='dropzone block5-position'>ACTION</div>\n	</div>\n</div>").appendTo(".dropzone_wrapper");
    check_zones_filled = function(target) {
      var target_id;
      target_id = target.attr("id");
      switch (target_id) {
        case "block4":
          return areas_filled[4];
        case "block5":
          return areas_filled[5];
        case "operator":
          return areas_filled[0];
        case "block1":
          return areas_filled[1];
        case "block2":
          return areas_filled[2];
        case "block3":
          return areas_filled[3];
        default:
          return false;
      }
    };
    areas_filled = [false, false, false, false, false, false];
    toggle_area = function(target) {
      var target_id;
      target_id = target.attr("id");
      switch (target_id) {
        case "block4":
          if (areas_filled[4]) {
            return areas_filled[4] = false;
          } else {
            return areas_filled[4] = true;
          }
          break;
        case "block5":
          if (areas_filled[5]) {
            return areas_filled[5] = false;
          } else {
            return areas_filled[5] = true;
          }
          break;
        case "operator":
          if (areas_filled[0]) {
            return areas_filled[0] = false;
          } else {
            return areas_filled[0] = true;
          }
          break;
        case "block1":
          if (areas_filled[1]) {
            return areas_filled[1] = false;
          } else {
            return areas_filled[1] = true;
          }
          break;
        case "block2":
          if (areas_filled[2]) {
            return areas_filled[2] = false;
          } else {
            return areas_filled[2] = true;
          }
          break;
        case "block3":
          if (areas_filled[3]) {
            return areas_filled[3] = false;
          } else {
            return areas_filled[3] = true;
          }
          break;
        default:
          return console.log("error on toggle");
      }
    };
    check_zone = function(block, area) {
      var areaType, blockTypes;
      areaType = area.attr("id").toString();
      blockTypes = block.attr("class").toString().split(' ');
      if (parseInt($.inArray(areaType, blockTypes)) !== -1) {
        return true;
      }
      return false;
    };
    transform_drop_area = function() {
      console.log($("#block5").html());
      $("#block5").remove();
      $("#drag17").remove();
      $("<div id='if' class=\"text\" >IF</div>\n<div id='block1' class=\"dropzone\">BLOCK1</div>\n<div id='operator' class=\"dropzone\">________</div>\n<div id='block2' class='dropzone'>BLOCK2</div>\n<div id='then' class='text'>THEN</div>\n<div id='block3' class='dropzone'>DO THIS</div>").appendTo($("#for-inner"));
      $("#for-inner").css({
        "height": "+=410px"
      });
      $("#for-outer").css({
        "height": "+=410px"
      });
      $("#run").css({
        "top": "+=410px"
      });
      return $("#reset").css({
        "top": "+=410px"
      });
    };
    interact('.dropzone').dropzone({
      accept: '.draggable'
    }).on('dropactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      if (check_zone(related_target, target) === false) {
        return;
      }
      if (related_target.hasClass("in_zone")) {
        related_target.removeClass("in_zone");
        toggle_area(target);
      }
      target.prop('dropzoneName', target.text());
      target.text('Drop here!');
      target.addClass('drop_possible');
      return related_target.addClass('drop_possible');
    }).on('dropdeactivate', function(event) {
      var related_target, target;
      target = $(event.target);
      related_target = $(event.relatedTarget);
      target.text(target.prop('dropzoneName'));
      target.removeClass('drop_possible');
      return related_target.removeClass('drop_possible');
    }).on('dragenter', function(event) {
      var $related_target, $target, draggableElement, dropCenter, dropRect, dropzoneElement;
      draggableElement = event.relatedTarget;
      dropzoneElement = event.target;
      dropRect = interact.getElementRect(dropzoneElement);
      dropCenter = {
        x: dropRect.left,
        y: dropRect.top,
        range: 400
      };
      event.draggable.draggable({
        snap: {
          targets: [dropCenter],
          relativePoints: [
            {
              x: 0,
              y: 0
            }
          ],
          endOnly: true
        }
      });
      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      if (check_zone($related_target, $target) === false) {
        return;
      }
      if (check_zones_filled($target)) {
        return;
      }
      return $target.addClass('drop_over');
    }).on('dragleave', function(event) {
      var $related_target, $target;
      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      if (check_zones_filled($target)) {
        return;
      }
      $target.removeClass('drop_over');
      return $related_target.removeClass('drop_over');
    }).on('drop', function(event) {
      var $related_target, $target, result, x, y;
      $target = $(event.target);
      $related_target = $(event.relatedTarget);
      if ($related_target.attr("id") === "drag17" && $target.attr("id") === "block5") {
        return transform_drop_area();
      } else {
        result = check_zones_filled($target);
        if (check_zone($related_target, $target) && (result === false)) {
          $related_target.addClass('drop_over');
          $related_target.addClass('in_zone');
          return toggle_area($target);
        } else {
          x = y = 0;
          $related_target.css({
            transform: "translate(" + x + "px, " + y + "px)"
          });
          $related_target.attr('data-x', x);
          return $related_target.attr('data-y', y);
        }
      }
    });
    zones = [];
    ref = $('.dropzone');
    for (i = 0, len = ref.length; i < len; i++) {
      dropzone = ref[i];
      zones.push({
        x: dropzone.getBoundingClientRect().left,
        y: dropzone.getBoundingClientRect().top
      });
    }
    interact('.draggable').draggable({
      onmove: function(event) {
        var $target, x, y;
        $target = $(event.target);
        x = (parseFloat($target.attr('data-x')) || 0) + event.dx;
        y = (parseFloat($target.attr('data-y')) || 0) + event.dy;
        $target.css({
          transform: "translate(" + x + "px, " + y + "px)"
        });
        $target.attr('data-x', x);
        return $target.attr('data-y', y);
      },
      onstart: function(event) {
        var target;
        target = $(event.target);
        return target.css({
          zIndex: 10
        });
      },
      onend: function(event) {
        var target;
        target = $(event.target);
        return target.css({
          zIndex: 0
        });
      },
      restrict: {
        restriction: 'body',
        endOnly: true,
        elementRect: {
          top: 0,
          left: 0,
          bottom: 1,
          right: 1
        }
      },
      axis: 'xy',
      inertia: true,
      max: Infinity,
      maxPerElement: 2
    });
  }

  control_for_loop.prototype.run = function() {};

  return control_for_loop;

})();
